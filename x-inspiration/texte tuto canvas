
2 tutos sont demandés, dois-je placer chaque tuto dans un répertoire particulier? Je bloque pas pour l'instant, j'attend de voir les contraintes de chaque tuto selon son contenu.

Tutoriel1-CANVAS
Qu'est ce que CANVAS?
A quoi ça sert?
Comment le mettre en place, l'utiliser?
Div html
Cibler votre balise grace à id et Java=script
Qu'est ce que CANVAS?
Dans le cadre de pages html, l'élément ‹canvas›est utilisé pour dessiner des formes à la volée grace à java-script.

A quoi ça sert?
La balise html ‹canvas› est un conteneur pour des formes ou dessins, le java-script permet d'y importer des formes pleines,ou juste leurs contours ou de les dessiner point à point.

Comment le mettre en place?
Le premier élément à mettre en place est votre balise ‹canvas›
Créons dans le corps de notre page html une balise ‹canvas›, balise ouvrante et fermante :
donnons à cette balise un attribut largeur(width="200"), une propriété hauteur(height="200") ainsi qu'un attribut id
‹canvas id="espaceCanvas" width="200" height="200" ›‹/canvas›
Le carré ci-dessous est votre balise canvas :

FIGURE1

Java-script est nécessaire pour dessiner dans votre espace Canvas,
Grace à l'id  ciblons avec java-script notre espace Canvas.
code : var espaceCanvas = document.getElementById("espaceCanvas");
Nous agirons dorénavant sur notre espace de dessin en utilisant la variable espaceCanvas.
Différents contextes et méthode peuvent être utilisés dans l'espace Canvas, (pour les dessins en 2 dilensions : 2D, pour les représentation en 3 dimensions : webgl et webgl2 et la reproduction d'image bitmab :ImageBitmapRendering)
Pour dessiner des figures prédéfinies ou point à point nous allons définir notre espace comme un espace "2D", crace à la méthode getContext("2D");
Code : var espaceCanvas = document.getElementById("espaceCanvas");
	var monDessin = espaceCanvas.getContext('2d');
Votre feuille vierge est prète à recevoir votre oeuvre : prenons notre crayon.
Pour commencer à dessiner utilisons la méthode beginPath();
Code : var espaceCanvas = document.getElementById("espaceCanvas");
	var monDessin = espaceCanvas.getContext('2d');
monDessin.beginPath();
Et désignons les coordonnées du point de départ de notre dessin avec la méthode moveTo(x, y) qui prend 2 arguments(ici x et y) qui correspondent aux coordonnées de notre premier point dans notre espace canvas.
Par exemple monDessin.moveTo(100, 20), démarrera notre dessin à 100pixels du bord gauche et à 20pixels du haut de notre surface de dessin.
Code : var espaceCanvas = document.getElementById("espaceCanvas");
		var monDessin = espaceCanvas.getContext('2d');
		monDessin.beginPath();
		monDessin.moveTo(100, 20)
Et enfin pour que qu'une ligne soit visible désignons les coordonnées d'un autre point qui permettra de créér notre première ligne avec la méthode lineTo(x,y).
Code : var espaceCanvas = document.getElementById("espaceCanvas");
		var monDessin = espaceCanvas.getContext('2d');
		monDessin.beginPath();
		monDessin.moveTo(100, 20)
		monDessin.lineTo(100,30)
Nous dessinons  ainsi ligne à ligne comme si vous ne lachions jamais notre crayon.
Quand toutes le lignes de notre dessin ont été écrites, nous cloturons notre dessin avec la méthode closePath();
Deux autres méthodes vont désigner notre visuel, la méthode stroke(); qui fera apparaitre une ligne passant par chacun des points définis avant dans le code et la méthode fill(); qui remplira notre forme.
Code : Code : var espaceCanvas = document.getElementById("espaceCanvas");
		var monDessin = espaceCanvas.getContext('2d');
		monDessin.beginPath();
		monDessin.moveTo(100, 20)
		monDessin.lineTo(100,30)
		monDessin.closePath()
		monDessin.stroke;
FIGURE2
D'autres propriétés permettent d'agrémenter notre dessin, par exemple fillStyle = pink; Remplira la surface de notre dessin d'un joli rose.
Code : var espaceCanvas = document.getElementById("espaceCanvas");
		var monDessin = espaceCanvas.getContext('2d');
		monDessin.beginPath();
		monDessin.moveTo(100, 20)
		monDessin.lineTo(100,30)
		monDessin.fillStyle = pink;
		monDessin.closePath()
		monDessin.stroke;
		monDessin.fill();
Si nous désirons une forme complexe composée de plusieurs éléments,
 après avoir cloturer notre première forme(monDessin.closePath()),
 nous pouvons entamer une autre forme en reprenant à partir de beginPath().
Le modèle que nous avons réalisé dans ce modèle est composé de lignes, si vous voulez utiliser des formes toutes faites(rond, triangle, carré) l'agrémenter de texte, copier des images, utiliser des dégradés de couleurs, pour composser votre oeuvre, vous pouvez utiliser les méthodes correspondantes que vous trouverez sur cette page,  lien: https://www.w3schools.com/html/html5_canvas.asp